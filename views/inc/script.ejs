    const feed      = document.getElementById("feed");
    const btnDelete = document.getElementById("btnDelete");

    //* Globals
    let trArr = [];
    //trArr[i].firstElementChild.innerHTML = "";\
    let trActive = [];
    let exportArrOfID = "";
    let list = [];
    let userAndTheirColor = [];
    <% userAndTheirColor.forEach(obj => {%>
        userAndTheirColor.push({ //* convert from ejs to js**
            user: "<%= obj.user%>",
            color: "<%= obj.color%>"
        });
    <%});%>
    // console.log(userAndTheirColor);
    let groupColors = [];
    <% if(groupColors.length != 0){
        groupColors.forEach(obj => {%>
            groupColors.push({ //* convert from ejs to js**
                group: "<%= obj.group%>",
                color: "<%= obj.color%>"
            });
        <%});
    }%>
    // console.log(groupColors);
    <% if(activeGroup != undefined){%>
        let currentGroup = "<%= activeGroup%>";
    <%}else if(groupColors.length != 0){%>
        let currentGroup = groupColors[0].group;
        
    <%}else{%>
        let currentGroup = "unset";
    <%}%>
    document.getElementById("formGroupName").value = currentGroup;
    document
        .getElementById("groupSelect")
        .children[0]
        .innerHTML = `Group: ${currentGroup}`;
    let nav = document.getElementsByTagName("nav")[0];
    let liShowCurrGroup = document.createElement("li");
    let aShowCurrGroup = document.createElement("a");
    aShowCurrGroup.innerHTML = `On group: ${currentGroup}`;
    liShowCurrGroup.appendChild(aShowCurrGroup);
    nav.children[0].appendChild(liShowCurrGroup);
    //console.log(nav.children[0]); // ul in nav
    // console.log(document.getElementById("formGroupName").value);

    //* set focus to "Add to list" field
    document.getElementById("formPOST").children[0].focus();

    function newIndex(text, author, id){
        const tr        = document.createElement("tr");
        const tdText    = document.createElement("td");
        const tdAuthor  = document.createElement("td");

        text    = String(text);
        author  = String(author);
        id      = String(id);

        tdText.innerHTML    = text;
        tdAuthor.innerHTML  = author;
        tr.id               = id;

        let userColor = userAndTheirColor.find(obj => obj.user == author).color;
        tdAuthor.style.backgroundColor = String(userColor);
        //| copy pasta from interwebs:
        function lightOrDark(color) {

            // Variables for red, green, blue values
            var r, g, b, hsp;
            
            // Check the format of the color, HEX or RGB?
            if (color.match(/^rgb/)) {
        
                // If HEX --> store the red, green, blue values in separate variables
                color = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
                
                r = color[1];
                g = color[2];
                b = color[3];
            } 
            else {
                
                // If RGB --> Convert it to HEX: http://gist.github.com/983661
                color = +("0x" + color.slice(1).replace( 
                color.length < 5 && /./g, '$&$&'));
        
                r = color >> 16;
                g = color >> 8 & 255;
                b = color & 255;
            }
            
            // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
            hsp = Math.sqrt(
            0.299 * (r * r) +
            0.587 * (g * g) +
            0.114 * (b * b)
            );
        
            //console.log(color, hsp);
            // Using the HSP value, determine whether the color is light or dark
            if (hsp>127.5) { //hsp>127.5 actual value
        
                // return 'light';
                tdAuthor.style.color = "#282828";
            } 
            else if(hsp !== 0){
        
                // return 'dark';
                tdAuthor.style.color = "#fff";

            }
        }
        lightOrDark(String(userColor));
        if (String(userColor).includes("light") || String(userColor) == "white"){
            tdAuthor.style.color = "#282828";
            //console.log("light")
        }else if(String(userColor).includes("dark")){
            tdAuthor.style.color = "#fff";
            //console.log("dark")
        }
        // console.log(userColor);

        
        tr.appendChild(tdText);
        tr.appendChild(tdAuthor);


        tr.onclick = () => {
            //* Toggle active-class
            tr.classList.toggle("trActive");

            //* if not exist in arr => add else remove
            if(trActive.indexOf(tr.id) == -1){
                trActive.push(tr.id);
            }else{
                trActive.splice(trActive.indexOf(tr.id), 1);
            }
            //console.log();
            
            //* Change vis of delete-button if any items are selected
            if(trActive.length <= 0){
                btnDelete.style.visibility = "hidden";
            }else if(trActive.length > 0){
                btnDelete.style.visibility = "visible";
            }
            
            //console.log(trActive.indexOf(tr.id), trActive);
            exportArrOfID = JSON.stringify(trActive);
        }

        trArr.push(tr);

        //* Append to feed
        feed.firstElementChild.firstElementChild.appendChild(tr);
    }

    //* Convert from obj => string => obj
    //* OBS: two different lists here:
    <% list.forEach(obj => {
        %>list.push({
            id: "<%= obj.id%>",
            item: "<%= obj.item%>",
            author: "<%= obj.author%>",
            group: "<%= obj.group%>"
            }
        );<%
    });%>
    //console.log(list);
    

    let filteredList;
    function filterFeed(group){

        filteredList = list.filter(obj => obj.group == group);

        //| reset feed
        let feedHeader = feed.firstElementChild.firstElementChild.children[0];
        feed.firstElementChild.firstElementChild.innerHTML = ""; 
        feed.firstElementChild.firstElementChild.appendChild(feedHeader);
        //console.log(feedHeader);

        //| DUMMY: newIndex("text", "auth", ++ bg & col);
        filteredList.forEach(obj => newIndex(obj.item, obj.author, obj.id));
        // console.log(list, filteredList);
    }
    filterFeed(currentGroup);
    

    btnDelete.onclick = function(){
        var trDelete = 
            feed.
            firstElementChild.
            firstElementChild.
            querySelectorAll("tr.trActive");
            
        //* un-select all
        trDelete.forEach(selected => selected.classList.toggle("trActive"));

        console.log(`ID of btn: ${btnDelete.id}`);

        //? Delete from shoppinglist where id=selected;
        //* as JSON
        //console.log(exportArrOfID);
        //* as array
        //console.log(JSON.parse(exportArrOfID));
        
        $.ajax({
            type: "DELETE",
            url : "/",
            contentType: "application/json",
            data: JSON.stringify(JSON.parse(exportArrOfID)),
            success: function(res){
                console.log("deleting with btn, " + res);
                //location.reload();
                window.location.href="/";
                
            },
            error: function(err){
                console.log(err);
            }
        });

        //? hide btn && clear trActive-array
        btnDelete.style.visibility = "hidden";
        trActive = [];
        
    } 

    
    //? Common items / icon-menu
    //* add table in DB, linkt to icon, times used ++ every time used. Sort meny by popularity

    const iconmenu = document.getElementById("iconmenu");

    const addIcon = (src, id) => {

        let li = document.createElement("li");
        let a = document.createElement("a");
        let icon = document.createElement("img");
    
        icon.src = src;
        icon.id = id;

        let dataToDB = {
            item: icon.id,
            group: currentGroup
        };
        // console.log(JSON.stringify(dataToDB));
        // console.log(dataToDB);
        li.onclick = (e) => {
            $.ajax({
                type: "POST",
                url : "/",
                contentType: "application/json",
                data: JSON.stringify(dataToDB),
                success: res =>{
                    window.location.href="/";
                },
                error: err => {
                    console.log(err);
                }
            });

        }

        a.appendChild(icon);
        li.appendChild(a);
        iconmenu.appendChild(li);
    }

    addIcon(`./assets/media/icons/milkH.png`, "Hel melk");
    addIcon(`./assets/media/icons/cheese.png`, "Ost");
    addIcon(`./assets/media/icons/milkL.png`, "Lett melk");
    addIcon(`./assets/media/icons/eggs.png`, "Egg");
    addIcon(`./assets/media/icons/ham.png`, "SjinkepÃ¥legg");

    //? Fill "Groups" w/data from DB
    const groupMenu = document.getElementById("groupMenu");

    const addGroup = (name, col) => {
        
        let li = document.createElement("li");
        
        li.innerHTML = name;  
        li.style.backgroundColor = col;
        //| copy pasta from interwebs:
        function lightOrDark(color) {

            // Variables for red, green, blue values
            var r, g, b, hsp;
            
            // Check the format of the color, HEX or RGB?
            if (color.match(/^rgb/)) {
        
                // If HEX --> store the red, green, blue values in separate variables
                color = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
                
                r = color[1];
                g = color[2];
                b = color[3];
            } 
            else {
                
                // If RGB --> Convert it to HEX: http://gist.github.com/983661
                color = +("0x" + color.slice(1).replace( 
                color.length < 5 && /./g, '$&$&'));
        
                r = color >> 16;
                g = color >> 8 & 255;
                b = color & 255;
            }
            
            // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
            hsp = Math.sqrt(
            0.299 * (r * r) +
            0.587 * (g * g) +
            0.114 * (b * b)
            );
        
            //console.log(color, hsp);
            // Using the HSP value, determine whether the color is light or dark
            if (hsp>197.5) { //hsp>127.5 actual value
        
                // return 'light';
                li.style.color = "#282828";
            } 
            else if(hsp !== 0){
        
                // return 'dark';
                li.style.color = "#fff";

            }
        }
        if (String(col).includes("light") || col == "white"){
            li.style.color = "#282828";
            //console.log("light")
        }else if(String(col).includes("dark")){
            li.style.color = "#fff";
            //console.log("dark")
        }
        lightOrDark(col);
        li.onclick = e => {
            currentGroup = e.target.innerHTML;
            document.getElementById("formGroupName").value = currentGroup;
            document
                .getElementById("groupSelect")
                .children[0]
                .innerHTML = `Group: ${currentGroup}`;
            aShowCurrGroup.innerHTML = `On group: ${currentGroup}`;    

            filterFeed(currentGroup);
            // console.log(filteredList);
            //console.log("switch group", e.target, currentGroup);
        }

        groupMenu.appendChild(li);
    }
    groupColors.forEach(obj => addGroup(obj.group, obj.color));


